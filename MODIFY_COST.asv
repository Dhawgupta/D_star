function [ kmin, Obs , NEW , OPEN , CLOSED,h,k ] = MODIFY_COST(toNode, fromNode, Obs, all_Obs , NEW, OPEN, CLOSED,h,k  )
% function [ isobs ] = is_Obstacle(point, mode,obstacles,all_obstacles)
% function [ N,O,C,h,k ] = INSERT( n, val ,N,O,C,h,k) % the node(n) and the corresponding H value
% fromNode will most Probably be open and the toNode if in Obstacle and not
% all_obstacle shall be removed from obstacels and similary vis-vis
    
% fromNode will never be an Obstacles
if ~is_Obstacle(fromNode,1, Obs, all_Obs)
    disp("There is some Error in the Program")
end

% the toNode is an Obstacle in real life and and free in the virtual Mpa
% then 
if ~is_Obstacle(toNode,1,Obs,all_Obs) && is_Obstacle(toNode, 2, Obs,all_Obs)
    % the node is obstacle in real life but not in the virtual we will make
    % an it an obstacle in the virtual map as well
    Obs = [Obs; toNode];% will automatically modify the cost of this
elseif is_Obstacle(toNode,1,Obs,all_Obs) && ~is_Obstacle(toNode, 2, Obs,all_Obs)
    Obs = removeList( toNode, Obs);
end

if inList(toNode, CLOSED)
    [NEW , OPEN, CLOSED, h, k] = INSERT(toNode, h(toNode(1),toNode(2)), NEW, OPEN, CLOSED, h, k); % in insert the OPEN list is sorted
end

% returning the kmin
kmin = k(OPEN(1,1), OPEN(1,2));

end

